// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: protos/worker.proto

package worker

import (
	domains "github.com/benmizrahi/gobig/internal/domains"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WorkerAPI_TasksHandler_FullMethodName = "/worker.WorkerAPI/TasksHandler"
	WorkerAPI_Health_FullMethodName       = "/worker.WorkerAPI/Health"
)

// WorkerAPIClient is the client API for WorkerAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkerAPIClient interface {
	TasksHandler(ctx context.Context, in *domains.IPartition, opts ...grpc.CallOption) (WorkerAPI_TasksHandlerClient, error)
	Health(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*domains.HCRes, error)
}

type workerAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerAPIClient(cc grpc.ClientConnInterface) WorkerAPIClient {
	return &workerAPIClient{cc}
}

func (c *workerAPIClient) TasksHandler(ctx context.Context, in *domains.IPartition, opts ...grpc.CallOption) (WorkerAPI_TasksHandlerClient, error) {
	stream, err := c.cc.NewStream(ctx, &WorkerAPI_ServiceDesc.Streams[0], WorkerAPI_TasksHandler_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &workerAPITasksHandlerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WorkerAPI_TasksHandlerClient interface {
	Recv() (*domains.IPartitionResult, error)
	grpc.ClientStream
}

type workerAPITasksHandlerClient struct {
	grpc.ClientStream
}

func (x *workerAPITasksHandlerClient) Recv() (*domains.IPartitionResult, error) {
	m := new(domains.IPartitionResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workerAPIClient) Health(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*domains.HCRes, error) {
	out := new(domains.HCRes)
	err := c.cc.Invoke(ctx, WorkerAPI_Health_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkerAPIServer is the server API for WorkerAPI service.
// All implementations must embed UnimplementedWorkerAPIServer
// for forward compatibility
type WorkerAPIServer interface {
	TasksHandler(*domains.IPartition, WorkerAPI_TasksHandlerServer) error
	Health(context.Context, *Empty) (*domains.HCRes, error)
	mustEmbedUnimplementedWorkerAPIServer()
}

// UnimplementedWorkerAPIServer must be embedded to have forward compatible implementations.
type UnimplementedWorkerAPIServer struct {
}

func (UnimplementedWorkerAPIServer) TasksHandler(*domains.IPartition, WorkerAPI_TasksHandlerServer) error {
	return status.Errorf(codes.Unimplemented, "method TasksHandler not implemented")
}
func (UnimplementedWorkerAPIServer) Health(context.Context, *Empty) (*domains.HCRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedWorkerAPIServer) mustEmbedUnimplementedWorkerAPIServer() {}

// UnsafeWorkerAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkerAPIServer will
// result in compilation errors.
type UnsafeWorkerAPIServer interface {
	mustEmbedUnimplementedWorkerAPIServer()
}

func RegisterWorkerAPIServer(s grpc.ServiceRegistrar, srv WorkerAPIServer) {
	s.RegisterService(&WorkerAPI_ServiceDesc, srv)
}

func _WorkerAPI_TasksHandler_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(domains.IPartition)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkerAPIServer).TasksHandler(m, &workerAPITasksHandlerServer{stream})
}

type WorkerAPI_TasksHandlerServer interface {
	Send(*domains.IPartitionResult) error
	grpc.ServerStream
}

type workerAPITasksHandlerServer struct {
	grpc.ServerStream
}

func (x *workerAPITasksHandlerServer) Send(m *domains.IPartitionResult) error {
	return x.ServerStream.SendMsg(m)
}

func _WorkerAPI_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerAPIServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkerAPI_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerAPIServer).Health(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkerAPI_ServiceDesc is the grpc.ServiceDesc for WorkerAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkerAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "worker.WorkerAPI",
	HandlerType: (*WorkerAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _WorkerAPI_Health_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TasksHandler",
			Handler:       _WorkerAPI_TasksHandler_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/worker.proto",
}
